---
- name: Copy oauth2-proxy config file
  ansible.builtin.template:
    src: oauth2-proxy.cfg
    dest: "{{ server_dir }}/oauth2-proxy.cfg"
  vars:
    oauth_cookie_secret: "{{ lookup('community.general.bitwarden_secrets_manager', 'a7868291-5b11-43cc-99de-b28d00bcd215').value }}"
    oauth_secret: "{{ lookup('community.general.bitwarden_secrets_manager', 'acac7b02-8847-4ef6-b3ca-b28700cfb83b') }}"

- name: Copy authenticated-emails file
  ansible.builtin.copy:
    src: authenticated-emails.txt
    dest: "{{ server_dir }}/authenticated-emails.txt"

- name: oauth2-proxy container
  community.docker.docker_container:
    name: oauth2-proxy
    image: "quay.io/oauth2-proxy/oauth2-proxy:latest"
    restart: true
    restart_policy: "unless-stopped"
    networks:
      - name: "{{ docker_network }}"
    command: "--config=/oauth2-proxy.cfg"
    volumes:
      - "{{ server_dir }}/oauth2-proxy.cfg:/oauth2-proxy.cfg"
      - "{{ server_dir }}/authenticated-emails.txt:/authenticated-emails.txt"
    env:
      OAUTH2_PROXY_CONFIG: "/oauth2-proxy.cfg"
    labels:
      traefik.enable: 'true'
      traefik.http.routers.oauth2-proxy.entrypoints: 'websecure'
      traefik.http.routers.oauth2-proxy.tls: 'true'
      traefik.http.routers.oauth2-proxy.rule: 'Host(`auth.{{ ansible_host }}`)'
      traefik.http.services.oauth2-proxy.loadbalancer.server.port: "4180"
      traefik.http.routers.oauth2-proxy.tls.certresolver: "letsencrypt"
      traefik.http.middlewares.oauth2-proxy.forwardauth.address: 'http://oauth2-proxy:4180'
      traefik.http.middlewares.oauth2-proxy.forwardauth.trustForwardHeader: 'true'
      traefik.http.middlewares.oauth2-proxy.forwardauth.authResponseHeaders: 'X-Auth-Request-Access-Token,Authorization,X-Auth-Request-Email,X-Auth-Request-User'
      traefik.http.middlewares.oauth2-proxy: 'auth-headers@file'

- name: Copy traefik static config file
  ansible.builtin.copy:
    src: traefik.yml
    dest: "{{ server_dir }}/traefik.yml"

- name: Copy traefik dynamic config file
  ansible.builtin.template:
    src: dynamic.yml
    dest: "{{ server_dir }}/dynamic.yml"

- name: Traefik container
  community.docker.docker_container:
    name: traefik
    image: "traefik:latest"
    pull: true
    restart: true
    restart_policy: "unless-stopped"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - name: "{{ docker_network }}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ server_dir }}/traefik.yml:/traefik.yml:ro"
      - "{{ server_dir }}/dynamic.yml:/dynamic.yml:ro"
      - "{{ server_dir }}/letsencrypt:/letsencrypt"
      - "{{ server_dir }}/logs/traefik:/var/log/traefik"
    env:
      HETZNER_API_KEY: "{{ lookup('community.general.bitwarden_secrets_manager', '2ac2aa22-b53c-47d0-b1c5-b26901483380').value }}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: "websecure"
      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.traefik.tls.certresolver: "letsencrypt"
      traefik.http.routers.traefik.rule: "Host(`traefik.{{ ansible_host }}`)"
      traefik.http.services.traefik.loadbalancer.server.port: "8080"
      traefik.http.routers.traefik.service: "api@internal"
      traefik.http.routers.traefik.middlewares: "auth-chain@file"

- name: Run whoami container
  community.docker.docker_container:
    image: traefik/whoami:latest-arm64
    name: whoami
    pull: true
    restart: true
    restart_policy: "unless-stopped"
    networks:
      - name: "{{ docker_network }}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.whoami.entrypoints: "websecure"
      traefik.http.routers.whoami.tls: "true"
      traefik.http.routers.whoami.tls.certresolver: "letsencrypt"
      traefik.http.routers.whoami.rule: "Host(`whoami.{{ ansible_host }}`)"
      traefik.http.services.whoami.loadbalancer.server.port: "80"
      traefik.http.routers.whoami.middlewares: "auth-chain@file"

- name: Run segments-go container
  community.docker.docker_container:
    image: olegsmedyuk/segments:latest
    name: segments
    pull: true
    restart: true
    restart_policy: "unless-stopped"
    networks:
      - name: "{{ docker_network }}"
    volumes:
      - "{{ data_dir }}/segments-go/segments.db:/app/segments.db"
    labels:
      traefik.enable: "true"
      traefik.http.routers.segments-go.entrypoints: "websecure"
      traefik.http.routers.segments-go.tls: "true"
      traefik.http.routers.segments-go.tls.certresolver: "letsencrypt"
      traefik.http.routers.segments-go.rule: "Host(`segments.{{ ansible_host }}`)"
      traefik.http.services.segments-go.loadbalancer.server.port: "8080"
      traefik.http.routers.segments-go.middlewares: "no-auth-chain@file"

- name: Pi-Hole container
  community.docker.docker_container:
    name: pihole
    image: pihole/pihole:latest
    pull: true
    restart: true
    restart_policy: "unless-stopped"
    networks:
      - name: "{{ docker_network }}"
    ports:
      - "127.0.0.1:53:53/tcp"
      - "127.0.0.1:53:53/udp"
      - "127.0.0.1:67:67/udp"
    volumes:
      - "{{ data_dir }}/pihole/etc-pihole/:/etc/pihole/"
      - "{{ data_dir }}/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/"
    env:
      TZ: "{{ tz }}"
      VIRTUAL_HOST: "pihole.{{ ansible_host }}"
      VIRTUAL_PORT: "80"
      WEBPASSWORD: "{{ lookup('community.general.bitwarden_secrets_manager', '1aafcc89-8d5b-4e34-ba2e-b26b013bd90d').value }}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.pihole.entrypoints: "websecure"
      traefik.http.routers.pihole.tls: "true"
      traefik.http.routers.pihole.tls.certresolver: "letsencrypt"
      traefik.http.routers.pihole.rule: "Host(`pihole.{{ ansible_host }}`)"
      traefik.http.routers.pihole.middlewares: "auth-chain@file"
      traefik.http.services.pihole.loadbalancer.server.port: "80"
