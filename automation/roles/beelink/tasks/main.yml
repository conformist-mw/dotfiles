---
- name: Install system requirements
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - avahi-daemon
      - bash-completion
      - btop  # htop alternative
      - curl
      - debian-archive-keyring
      - fd-find  # fast find replacement written in Rust
      - gdu  # disk usage analyzer wiritten in Go (ncdu alternative)
      - htop
      - libacl1
      - libacl1-dev
      - liblz4-dev
      - libssl-dev
      - libxxhash-dev
      - libzstd-dev
      - mc
      - ncdu
      - nnn  # terminal file manager
      - ntfs-3g
      - plocate
      - python3-dev
      - python3-pip
      - python3-psycopg2
      - ranger
      - rclone
      - sqlite3
      - smartmontools
    update_cache: yes
  become: true

- name: Include notifications tasks
  ansible.builtin.include_tasks: tasks/notifications.yml

- name: Create data dir
  ansible.builtin.file:
    path: "{{ data_dir }}"
    state: directory

- name: Create ssd data dir
  ansible.builtin.file:
    path: /mnt/ssd
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: true

- name: data ssd disk
  ansible.posix.mount:
    path: /mnt/ssd
    src: PARTUUID="1ae670cf-01"
    fstype: ext4
    state: present
  become: true

- name: Create hdd data dir
  ansible.builtin.file:
    path: /mnt/hdd
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: true

- name: data hdd disk
  ansible.posix.mount:
    path: /mnt/hdd
    src: UUID="281B99140849F384"
    fstype: ntfs
    opts: "auto,exec,rw,user,dmask=002,fmask=113,uid=1000,gid=1000"
    passno: 2
    state: present
  become: true

- name: Create a network for docker
  community.docker.docker_network:
    name: "{{ docker_network }}"
    ipam_config:
      - subnet: "{{ docker_subnet }}"

- name: copy custom pg_hba.conf
  ansible.builtin.template:
    src: pg_hba.conf
    dest: "{{ data_dir }}/postgres/data/pg_hba.conf"
  register: pg_hba
  become: true

- name: Database container
  community.docker.docker_container:
    name: postgres
    image: postgres:16-alpine
    restart: "{{ pg_hba.changed | default(false) }}"
    restart_policy: "always"
    networks:
      - name: "{{ docker_network }}"
    ports:
      - "5432:5432"
    volumes:
      - "{{ data_dir }}/postgres/data:/var/lib/postgresql/data"
      - "/var/run/postgresql:/var/run/postgresql"
    env:
      POSTGRES_PASSWORD: "postgres"

- name: Adde cloudflare repo
  block:
    - name: add apt-key
      ansible.builtin.get_url:
        url: https://pkg.cloudflare.com/cloudflare-main.gpg
        dest: /etc/apt/keyrings/cloudflare-main.gpg

    - name: somerepo | apt source
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared {{ ansible_distribution_release }} main"
        state: present
    - name: Install cloudflared
      ansible.builtin.apt:
        name: cloudflared
        update_cache: yes
  become: true

- name: Get telegram bot token, chat id
  set_fact:
    telegram_bot: "{{ lookup('community.general.bitwarden_secrets_manager', '26e16cc8-09d8-4636-b0ab-b2690130a690') }}"


- name: Watchtower
  community.docker.docker_container:
    name: watchtower
    image: containrrr/watchtower
    restart_policy: "always"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/etc/localtime:/etc/localtime:ro"
    command: --cleanup
    networks:
      - name: "{{ docker_network }}"
    env:
      WATCHTOWER_NOTIFICATION_URL: "telegram://{{ telegram_bot.value }}@telegram?chats={{ telegram_bot.note }}"
      WATCHTOWER_NOTIFICATIONS_HOSTNAME: "{{ ansible_host }}"
      WATCHTOWER_SCHEDULE: "0 0 9 * * *"

- name: check if bw cli is installed
  stat:
    path: /usr/local/bin/bw
  register: bw_cli

- name: Install bw cli
  block:
    - name: download bw cli
      get_url:
        url: "https://github.com/bitwarden/clients/releases/download/cli-v2025.1.3/bw-oss-linux-2025.1.3.zip"
        dest: /tmp/bw-latest.zip

    - name: install bw cli
      unarchive:
        src: /tmp/bw-latest.zip
        dest: /usr/local/bin
        remote_src: true
      become: true
  when: not bw_cli.stat.exists

- name: Get bw client, secret
  set_fact:
    bw_secrets: "{{ lookup('community.general.bitwarden_secrets_manager', '3407121d-6e9f-4f71-ba40-b29400a29a13') }}"

- name: setup bitwarden backup job
  block:
    - name: Create Bitwarden environment file
      copy:
        dest: /etc/bw.env
        content: |
          BW_CLIENTID={{ bw_secrets.note }}
          BW_CLIENTSECRET={{ bw_secrets.value }}
          BW_PASSWORD={{ lookup('community.general.bitwarden_secrets_manager', '45db43c7-e937-45c3-9fe5-b2940131f23a').value }}
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0600"
      become: true

    - name: copy bw_backup script
      ansible.builtin.copy:
        src: "bw_backup.sh"
        dest: "/usr/local/bin/bw_backup.sh"
        mode: "0755"
      become: true

    - name: copy bw backup systemd service
      ansible.builtin.template:
        src: "bw_backup.service"
        dest: "/etc/systemd/system/bw_backup.service"
      vars:
        bw_env_filepath: "/etc/bw.env"
        bw_backup_path: "{{ data_dir }}/bw"
      become: true

    - name: copy bw backup systemd timer
      ansible.builtin.copy:
        src: "bw_backup.timer"
        dest: "/etc/systemd/system/bw_backup.timer"
      become: true

    - name: enable bw backup timer
      ansible.builtin.systemd:
        name: bw_backup.timer
        enabled: yes
        state: started
        daemon_reload: yes
      become: true
